{"version":3,"sources":["InfoBox.js","utils.js","Map.js","Table.js","LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","stat","title","cases","total","active","isRed","props","Card","className","onClick","CardContent","numeral","format","toLocaleString","showDataOnMap","data","casesType","map","country","Circle","key","center","countryInfo","lat","long","color","fillColor","casesTypeColors","hex","fillOpacity","radius","Math","sqrt","multiplier","Popup","recovered","deaths","Map","countries","zoom","useState","mapCenter","setMapCenter","useEffect","TileLayer","url","Table","id","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","gridLines","type","time","unit","tooltipFormat","yAxes","ticks","callback","LineGraph","setData","countryCode","fetch","then","response","json","timeline","length","datasets","backgroundColor","borderColor","borderWidth","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","sortedData","sort","a","b","sortData","FormControl","Select","variant","onChange","event","target","MenuItem","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4a3cca8b.chunk.js","sourcesContent":["import React from 'react'\nimport { Card, CardContent } from '@material-ui/core'\nimport { prettyPrintStat } from './utils'\nimport './InfoBox.css'\n\nconst InfoBox = ({ title, cases, total, active, isRed, ...props }) => {\n  return (\n    <Card\n      className={`infoBox ${active && 'infoBox--active'}`}\n      onClick={props.onClick}\n    >\n      <CardContent>\n        <div className='infoBox__title'>{title}</div>\n        <div className='infoBox__label'>\n          <div>24 hours:</div>\n          <span className={`infoBox__span ${isRed && 'infoBox--isRed'}`}>\n            +{cases && prettyPrintStat(cases)}\n          </span>\n        </div>\n        <div className='infoBox__label'>\n          <div>Total:</div>\n          <span className={`infoBox__span ${isRed && 'infoBox--isRed'}`}>\n            {total && total.toLocaleString()}\n          </span>\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n\nexport default InfoBox\n","import numeral from 'numeral'\n\nexport const sortData = (data) => {\n  const sortedData = [...data]\n\n  return sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1))\n}\n\nexport const prettyPrintStat = (stat) => {\n  if (stat >= 1000) {\n    return `${numeral(stat).format('0.0a')}`\n  } else if (!stat) {\n    return '0'\n  } else {\n    return stat\n  }\n}\n","import React, { useEffect, useState } from 'react'\nimport { Map as Leaflet, TileLayer } from 'react-leaflet'\nimport { Circle, Popup } from 'react-leaflet'\nimport numeral from 'numeral'\nimport './Map.css'\n\nconst Map = ({ countries, casesType, center, zoom }) => {\n  const [mapCenter, setMapCenter] = useState(center)\n\n  useEffect(() => {\n    setMapCenter(center)\n  }, [center])\n\n  return (\n    <div className='map'>\n      <Leaflet center={mapCenter} zoom={zoom}>\n        <TileLayer url='https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png' />\n        {showDataOnMap(countries, casesType)}\n      </Leaflet>\n    </div>\n  )\n}\n\nexport const showDataOnMap = (data, casesType = 'cases') =>\n  data.map((country) => (\n    <Circle\n      key={country.country}\n      center={[country.countryInfo.lat, country.countryInfo.long]}\n      color='transparent'\n      fillColor={casesTypeColors[casesType].hex}\n      fillOpacity={0.4}\n      radius={\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n      }\n    >\n      <Popup>\n        <div>\n          <div className='info'>\n            <strong>{country.country}</strong>\n          </div>\n          <div className='info'>\n            Cases: {numeral(country.cases).format('0,0')}\n          </div>\n          <div className='info'>\n            Recovered: {numeral(country.recovered).format('0,0')}\n          </div>\n          <div className='info'>\n            Deaths: {numeral(country.deaths).format('0,0')}\n          </div>\n        </div>\n      </Popup>\n    </Circle>\n  ))\n\nconst casesTypeColors = {\n  cases: {\n    hex: '#cc1034',\n    multiplier: 800,\n  },\n  recovered: {\n    hex: '#7dd71d',\n    multiplier: 800,\n  },\n  deaths: {\n    hex: '#cc1034',\n    multiplier: 1600,\n  },\n}\n\nexport default Map\n","import React from 'react'\nimport './Table.css'\n\nconst Table = ({ countries }) => {\n  return (\n    <div className='table-container'>\n      <table className='table'>\n        <thead>\n          <tr id='title-row'>\n            <th>\n              <h3 className='title'>Cases by Country</h3>\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          {countries.map(({ country, cases }) => (\n            <tr key={country}>\n              <td>{country}</td>\n              <td>{cases.toLocaleString()}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\nexport default Table\n","import React, { useState, useEffect } from 'react'\nimport { Line } from 'react-chartjs-2'\nimport numeral from 'numeral'\nimport './LineGraph.css'\n\nconst buildChartData = (data, casesType = 'cases') => {\n  let chartData = []\n  let lastDataPoint\n  for (let date in data.cases) {\n    if (lastDataPoint) {\n      let newDataPoint = {\n        x: date,\n        y: data[casesType][date] - lastDataPoint,\n      }\n      chartData.push(newDataPoint)\n    }\n    lastDataPoint = data[casesType][date]\n  }\n  return chartData\n}\n\nconst LineGraph = ({ casesType, country, countryInfo }) => {\n  const [data, setData] = useState({})\n  const countryCode = country === 'worldwide' ? 'all' : country\n\n  useEffect(() => {\n    const fetchData = () => {\n      fetch(\n        `https://disease.sh/v3/covid-19/historical/${countryCode}?lastdays=300`\n      )\n        .then((response) => response.json())\n        .then((data) => {\n          if (country === 'worldwide') {\n            const chartData = buildChartData(data, casesType)\n            setData(chartData)\n          } else {\n            if (!data.timeline) {\n              setData(null)\n            } else {\n              const chartData = buildChartData(data.timeline, casesType)\n              setData(chartData)\n            }\n          }\n        })\n    }\n\n    fetchData()\n  }, [casesType, countryCode, country])\n\n  return (\n    <div>\n      <h3 className='chart-title'>\n        {country === 'worldwide' ? 'Worldwide' : countryInfo.country} Daily{' '}\n        {casesType}\n      </h3>\n      <div className='chart-container'>\n        {data && data?.length > 0 && (\n          <Line\n            data={{\n              datasets: [\n                {\n                  backgroundColor: 'rgba(204, 16, 52, 0)',\n                  borderColor: '#cc1034',\n                  borderWidth: '2',\n                  data: data,\n                },\n              ],\n            }}\n            options={options}\n          />\n        )}\n        {!data && <p className='chart--noData'>No daily data available.</p>}\n      </div>\n    </div>\n  )\n}\n\nconst options = {\n  legend: {\n    display: false,\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: 'index',\n    intersect: false,\n    callbacks: {\n      label: (tooltipItem) => {\n        return numeral(tooltipItem.value).format('+0,0')\n      },\n    },\n  },\n  scales: {\n    xAxes: [\n      {\n        gridLines: {\n          display: false,\n        },\n        type: 'time',\n        time: {\n          unit: 'month',\n          tooltipFormat: 'll',\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: false,\n        },\n        ticks: {\n          callback: (value) => {\n            return numeral(value).format('0a')\n          },\n        },\n      },\n    ],\n  },\n}\n\nexport default LineGraph\n","import React, { useState, useEffect } from 'react'\nimport {\n  FormControl,\n  Select,\n  MenuItem,\n  Card,\n  CardContent,\n} from '@material-ui/core'\n\nimport InfoBox from './InfoBox'\nimport Map from './Map'\nimport Table from './Table'\nimport LineGraph from './LineGraph'\n\nimport './App.css'\nimport 'leaflet/dist/leaflet.css'\nimport { sortData } from './utils'\n\nconst App = () => {\n  const [countries, setCountries] = useState([])\n  const [country, setCountry] = useState('worldwide')\n  const [countryInfo, setCountryInfo] = useState({})\n  const [tableData, setTableData] = useState([])\n  const [mapCenter, setMapCenter] = useState({ lat: 16.5388, lng: 10.0418 })\n  const [mapZoom, setMapZoom] = useState(2)\n  const [mapCountries, setMapCountries] = useState([])\n  const [casesType, setCasesType] = useState('cases')\n\n  useEffect(() => {\n    const getCountries = () => {\n      // fetch worldwide stats from API upon mount\n      fetch('https://disease.sh/v3/covid-19/all')\n        .then((response) => response.json())\n        .then((data) => setCountryInfo(data))\n\n      // fetch countries from API upon mount\n      fetch('https://disease.sh/v3/covid-19/countries')\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }))\n\n          const sortedData = sortData(data)\n          setTableData(sortedData)\n          setMapCountries(data)\n          setCountries(countries)\n        })\n    }\n\n    getCountries()\n  }, [])\n\n  const onCountryChange = (event) => {\n    const countryCode = event.target.value\n\n    const url =\n      countryCode === 'worldwide'\n        ? 'https://disease.sh/v3/covid-19/all'\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`\n\n    fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setCountry(countryCode)\n        setCountryInfo(data)\n        setMapCenter(\n          countryCode === 'worldwide'\n            ? [16.5388, 10.0418]\n            : [data.countryInfo.lat, data.countryInfo.long]\n        )\n        setMapZoom(countryCode === 'worldwide' ? 2 : 4)\n      })\n  }\n\n  return (\n    <div className='app'>\n      <div className='app__left'>\n        <div className='app__header'>\n          <h1 className='app__title'>Live COVID-19 Heatmap</h1>\n\n          <FormControl className='app__dropdown'>\n            <Select\n              variant='outlined'\n              value={country}\n              onChange={onCountryChange}\n            >\n              <MenuItem value='worldwide'>Worldwide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value} key={country.name}>\n                  {country.name}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n        <div className='app__stats'>\n          <InfoBox\n            title='Cases'\n            cases={countryInfo.todayCases}\n            total={countryInfo.cases}\n            onClick={() => setCasesType('cases')}\n            active={casesType === 'cases'}\n            isRed\n          />\n          <InfoBox\n            title='Recovered'\n            cases={countryInfo.todayRecovered}\n            total={countryInfo.recovered}\n            onClick={() => setCasesType('recovered')}\n            active={casesType === 'recovered'}\n          />\n          <InfoBox\n            title='Deaths'\n            cases={countryInfo.todayDeaths}\n            total={countryInfo.deaths}\n            onClick={() => setCasesType('deaths')}\n            active={casesType === 'deaths'}\n            isRed\n          />\n        </div>\n        <Map\n          className='map1'\n          countries={mapCountries}\n          center={mapCenter}\n          zoom={mapZoom}\n          casesType={casesType}\n        />\n      </div>\n\n      <Card className='app__right'>\n        <CardContent className='app__right-content'>\n          <Table countries={tableData} />\n          <LineGraph\n            casesType={casesType}\n            country={country}\n            countryInfo={countryInfo}\n          />\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}